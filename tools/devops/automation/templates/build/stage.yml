# template that contains all the different steps to create a pkgs, publish the results and provide feedback to the
# developers in github.
parameters:
- name: runTests
  type: boolean
  default: true

- name: vsdropsPrefix
  type: string

- name: runDeviceTests
  type: boolean
  default: true

- name: keyringPass
  type: string

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

- name: enableDotnet
  type: boolean
  default: false

jobs:
- job: configure
  displayName: 'Configure build'
  pool:
    vmImage: windows-latest

  variables:
    isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
    isScheduled: $[eq(variables['Build.Reason'], 'Schedule')]

  steps:
  - template: configure.yml

- job: AgentPoolSelector       # https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml
  pool:                        # Consider using an agentless (server) job here, but would need to host selection logic as an Azure function: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#server
    vmImage: ubuntu-latest
  steps:
  - checkout: none             # https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#checkout

  # Selects appropriate agent pool based on trigger type (PR or CI); manually triggered builds target the PR pool
  - template: azure-devops-pools/agent-pool-selector.yml@templates
    parameters:
      agentPoolPR: $(PRBuildPool)
      agentPoolPRUrl: $(PRBuildPoolUrl)
      agentPoolCI: $(CIBuildPool)
      agentPoolCIUrl: $(CIBuildPoolUrl)

- job: build
  dependsOn:
  - AgentPoolSelector
  - configure
  displayName: 'Build packages'
  timeoutInMinutes: 1000
  variables:
    AgentPoolComputed: $[ dependencies.AgentPoolSelector.outputs['setAgentPool.AgentPoolComputed'] ]
    # add all the variables that have been parsed by the configuration step. Could we have a less verbose way??
    #
    # build-package
    # run-internal-tests
    # skip-packages
    # skip-nugets
    # skip-signing
    # skip-external-tests
    # trigger-device-tests
    # run-sample-tests
    # skip-packaged-xamarin-mac-tests
    BuildPackage: $[ dependencies.configure.outputs['labels.build-package'] ]
    RunInternalTests: $[ dependencies.configure.outputs['labels.run-internal-tests'] ]
    SkipPackages: $[ dependencies.configure.outputs['labels.skip-packages'] ]
    SkipNugets: $[ dependencies.configure.outputs['labels.skip-nugets'] ]
    SkipSigning: $[ dependencies.configure.outputs['labels.skip-signing'] ]
    SkipExternalTests: $[ dependencies.configure.outputs['labels.skip-external-tests'] ]
    TriggerDeviceTests: $[ dependencies.configure.outputs['labels.trigger-device-tests'] ]
    RunSampleTests: $[ dependencies.configure.outputs['labels.run-sample-tests'] ]
    SkipPackagedXamarinMacTests: $[ dependencies.configure.outputs['labels.skip-packaged-xamarin-mac-tests'] ]
    SkipPublicJenkins: $[ dependencies.configure.outputs['labels.skip-public-jenkins'] ]
    SkipApiComparison: $[ dependencies.configure.outputs['labels.skip-api-comparison'] ]
    # old and ugly env var use by jenkins, we do have parts of the code that use it, contains the PR number
    PR_ID: $[ dependencies.configure.outputs['labels.pr-number'] ]
    # set the branch variable name, this is required by jenkins and we have a lot of scripts that depend on it
    BRANCH_NAME: $(Build.SourceBranchName)
    XHARNESS_LABELS: $[ dependencies.configure.outputs['labels.xharness-labels'] ]
  pool:
    name: $(AgentPoolComputed)
    demands:
    - Agent.OS -equals Darwin
    - macios_image -equals v2.1     # Big Sur image with Xcode 12.4 and 12.5 installed
  workspace:
    clean: all

  steps:
  - template: build.yml
    parameters:
      isPR: ${{ or(eq(variables['Build.Reason'], 'PullRequest'), and(eq(variables['Build.SourceBranchName'], 'merge'), or(eq(variables['Build.Reason'], 'Manual'), eq(variables['Build.Reason'], 'IndividualCI')))) }}
      runTests: ${{ parameters.runTests }}
      runDeviceTests: ${{ parameters.runDeviceTests }}
      vsdropsPrefix: ${{ parameters.vsdropsPrefix }}
      keyringPass: ${{ parameters.keyringPass }}
      gitHubToken: ${{ parameters.gitHubToken }}
      xqaCertPass: ${{ parameters.xqaCertPass }}
      enableDotnet: ${{ parameters.enableDotnet }}

- job: upload_azure_blob
  displayName: 'Upload packages to Azure'
  timeoutInMinutes: 1000
  dependsOn:
  - configure
  - build # can start as soon as the packages are available
  condition: and(succeeded(), contains (dependencies.build.outputs['configuration.BuildPkgs'], 'True')) # only run when we do have pkgs

  variables:
    Parameters.outputStorageUri: ''
    NUGETS_PUBLISHED: $[ dependencies.build.outputs['nugetPublishing.NUGETS_PUBLISHED'] ]
    SKIP_NUGETS: $[ dependencies.configure.outputs['labels.skip-nugets'] ]

  pool:
    vmImage: 'windows-latest'
    workspace:
      clean: all
  steps:
  - template: upload-azure.yml
    parameters:
      enableDotnet: ${{ parameters.enableDotnet }}

- job: upload_vsdrops
  displayName: 'Upload test results to VSDrops'
  timeoutInMinutes: 1000
  dependsOn: build # can start as soon as the tests are done
  condition: and(succeededOrFailed() , contains (dependencies.build.outputs['runTests.TESTS_RAN'], 'True')) # only run when we did run the tests

  pool:
    vmImage: 'windows-latest'
    workspace:
      clean: all
  steps:
  - template: upload-vsdrops.yml
    parameters:
      devicePrefix: sim
      runTests: ${{ parameters.runTests }}

- job: upload_vsts_tests
  displayName: 'Upload xml to vsts'
  timeoutInMinutes: 1000
  dependsOn:  build # can start as soon as the tests are done
  condition: and(succeededOrFailed() , contains (dependencies.build.outputs['runTests.TESTS_RAN'], 'True')) # only run when we did run the tests

  pool:
    vmImage: 'windows-latest'
    workspace:
      clean: all
  steps:
  - template: ../common/upload-vsts-tests.yml
    parameters:
      devicePrefix: sim

- job: publish_html
  displayName: 'Publish Html report in VSDrops'
  timeoutInMinutes: 1000
  dependsOn: # has to wait for the tests to be done AND the data to be uploaded
  - configure
  - build
  - upload_azure_blob
  - upload_vsdrops
  - upload_vsts_tests
  condition: succeededOrFailed()
  variables:
    # Define the variable FOO from the previous job
    # Note the use of single quotes!
    BUILD_PACKAGE: $[ dependencies.configure.outputs['labels.build-package'] ]
    TESTS_BOT: $[ dependencies.build.outputs['runTests.TESTS_BOT'] ]
    TESTS_JOBSTATUS: $[ dependencies.build.outputs['runTests.TESTS_JOBSTATUS'] ]
    APIDIFF_MESSAGE: $[ dependencies.build.outputs['apidiff.APIDIFF_MESSAGE'] ]
    APIDIFF_BUILT: $[ dependencies.build.outputs['apidiff.APIDIFF_BUILT'] ]
    PR_ID: $[ dependencies.configure.outputs['labels.pr-number'] ]
  pool:
    vmImage: 'windows-latest'
    workspace:
      clean: all
  steps:
  - template: publish-html.yml
    parameters:
      statusContext: "Build"
      runTests: ${{ parameters.runTests }}
      vsdropsPrefix: ${{ parameters.vsdropsPrefix }}
      devicePrefix: sim
