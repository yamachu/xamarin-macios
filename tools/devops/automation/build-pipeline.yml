# YAML pipeline build definition
# https://devdiv.visualstudio.com/DevDiv/_apps/hub/ms.vss-ciworkflow.build-ci-hub?_a=edit-build-definition&id=13947&view=Tab_Tasks
#
# YAML build pipeline based on the Jenkins multi-stage (main branch) build workflow
# https://jenkins.internalx.com/view/Xamarin.MaciOS/job/macios/job/main/
# https://jenkins.internalx.com/view/Xamarin.MaciOS/job/macios/configure
#
parameters:
- name: runTests
  type: boolean
  default: true

- name: runDeviceTests
  type: boolean
  default: true

- name: runSamples
  type: boolean
  default: false
  
- name: provisionatorChannel
  type: string
  default: 'latest'

- name: enableDotnet
  type: boolean
  default: true

# We are doing some black magic. We have several templates that 
# are executed with different parameters. 
#
# The problem with that is that templates cannot be used with the 
# matrix strategy, so we are doing a little trick based on the following:
#
# 1. We can create a template that expands.
# 2. We can use the each keyword, which allow a loop
# 3. yaml is a super set of json, therefore, it was jsond dictionaties
#
# the following parameters, define an array of dictionaries with the
# data required by the templates. Do you want a new stage with 
# device tests, no more copy paste, just add the new config.

- name: deviceTestsConfigurations
  type: object
  default: [
    {
      devicePrefix: 'iOS32b',
      execute: 'runDevice32b',
      stageName: 'iOS32b Device Tests',
      iOSDevicePool: 'VSEng-Xamarin-QA',
      useXamarinStorage: False,
      testsLabels: '--label=run-ios-32-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests',
      statusContext: 'VSTS: device tests iOS32b',
      iOSDeviceDemand: 'xismoke-32'
    },
    {
      devicePrefix: 'iOS64',
      execute: 'runDevice64b',
      stageName: 'iOS64 Device Tests',
      iOSDevicePool: 'VSEng-Xamarin-Mac-Devices',
      useXamarinStorage: False,
      testsLabels: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests',
      statusContext: 'VSTS: device tests iOS',
      iOSDeviceDemand: 'ios'
    },
    {
      devicePrefix: 'tvos',
      execute: 'runDeviceTv',
      stageName: 'tvOS Device Tests',
      iOSDevicePool: 'VSEng-Xamarin-Mac-Devices',
      useXamarinStorage: False,
      testsLabels: '--label=run-tvos-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests',
      statusContext: 'VSTS: device tests tvOS',
      iOSDeviceDemand: 'tvos'
    }]

- name: macTestsConfigurations
  type: object
  default: [
    {
      stageName: 'Mac Catalina (10.15)',
      macPool: 'VSEng-Xamarin-RedmondMacBuildPool-iOS-Trusted',
      osVersion: '10.15',
      statusContext: 'Mac Catalina (10.15)',
      checkDemands: true
    },
    {
      stageName: 'Mac Mojave (10.14)',
      macPool: 'Hosted Mac Internal Mojave',
      osVersion: '10.14',
      statusContext: 'Mac Mojave (10.14)',
      checkDemands: false
    },
    {
      stageName: 'Mac High Sierra (10.13)',
      macPool: 'Hosted Mac Internal',
      osVersion: '10.13',
      statusContext: 'Mac High Sierra (10.13)',
      checkDemands: false
    }]

resources:
  repositories:
  - repository: self
    checkoutOptions:
      submodules: true

  - repository: templates
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/main
    endpoint: xamarin

  - repository: maccore
    type: github
    name: xamarin/maccore
    ref: refs/heads/main
    endpoint: xamarin

  - repository: release-scripts
    type: github
    name: xamarin/release-scripts
    ref: refs/heads/sign-and-notarized
    endpoint: xamarin

variables:
- group: xamops-azdev-secrets
- group: Xamarin-Secrets
- group: Xamarin Signing
- group: Xamarin Release
- group: Xamarin Notarization
- group: XamarinCompatLab                                     # provisionator-uri setting
- name: GitHub.Token                                          # Override the GitHub.Token setting defined in the Xamarin Release group
  value: $(github--pat--vs-mobiletools-engineering-service2)  # Use a token dedicated to critical production workflows and help avoid GitHub throttling
- name: AzDoBuildAccess.Token
  value: $(pat--xamarinc--build-access)
- name: system.debug
  value: true
- name: SigningKeychain
  value: "builder.keychain"
- name: OSX_KEYCHAIN_PASS                                     # UNDONE: Override the OSX_KEYCHAIN_PASS to use same password as used by the iOS mac pool machines
  value: $(pass--lab--mac--builder--keychain)
- name: VSDropsPrefix
  value: 'https://vsdrop.corp.microsoft.com/file/v1/xamarin-macios/device-tests'
- name: USE_TCP_TUNNEL                                        # Needed to ensure that devices uses the usb cable to communicate with the devices to run the tests.
  value: true
- name: TeamName
  value: 'xamarin-macios'
- name: PROVISIONATOR_CHANNEL
  value: ${{ parameters.provisionatorChannel }}
- name: PRBuildPool
  value: 'VSEng-Xamarin-RedmondMacBuildPool-iOS-Untrusted'
- name: PRBuildPoolUrl
  value: 'https://devdiv.visualstudio.com/_settings/agentpools?poolId=366&view=agents'
- name: CIBuildPool
  value: 'VSEng-Xamarin-RedmondMacBuildPool-iOS-Trusted'
- name: CIBuildPoolUrl
  value: 'https://devdiv.visualstudio.com/_settings/agentpools?poolId=367&view=agents'

trigger:
  branches:
    include:
    - '*'
    exclude:
    - refs/heads/locfiles/*
  paths:
    exclude:
    - docs
    - CODEOWNERS
    - ISSUE_TEMPLATE.md
    - LICENSE
    - NOTICE.txt
    - README.md
    - SECURITY.MD
    - src/README.md

pr:
  autoCancel: true
  branches:
    include:
    - main
    - d16-*
    - xcode*
    - release/*
  paths:
    exclude:
    - docs
    - CODEOWNERS
    - ISSUE_TEMPLATE.md
    - LICENSE
    - NOTICE.txt
    - README.md
    - SECURITY.MD
    - src/README.md

schedules:

# the translations team wants a green build, we can do that on sundays even if 
# the code did not change and without the device tests.
- cron: "0 12 * * 0"
  displayName: Weekly Translations build (Sunday @ noon)
  branches:
    include:
    - main
  always: true

stages:

- stage: governance_checks
  displayName: 'Governance Checks'
  dependsOn: []
  jobs:
    - job: governance
      displayName: 'Governance Checks'
      pool:
        vmImage: windows-latest
      steps:
      - template: templates/governance-checks.yml

- stage: build_packages
  displayName: 'Build'
  dependsOn: []
  jobs:
    - template: templates/build/stage.yml
      parameters:
        vsdropsPrefix: ${{ variables.vsdropsPrefix }}
        runTests: ${{ and(parameters.runTests, ne(variables['Build.Reason'], 'Schedule'))}}
        runDeviceTests: ${{ and(parameters.runDeviceTests, ne(variables['Build.Reason'], 'Schedule')) }}
        keyringPass: $(xma-password)
        gitHubToken: ${{ variables['GitHub.Token'] }}
        xqaCertPass: $(xqa--certificates--password)
        enableDotnet: ${{ parameters.enableDotnet }}

- ${{ if eq(parameters.runDeviceTests, true) }}:
  - ${{ if and(ne(variables['Build.Reason'], 'Schedule'), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual'))) }}:
    - ${{ each config in parameters.deviceTestsConfigurations }}:
      - template: templates/devices/stage.yml
        parameters:
          devicePrefix: ${{ config['devicePrefix'] }} 
          execute: ${{ config['execute'] }} 
          stageName: ${{ config['stageName'] }} 
          iOSDevicePool: ${{ config['iOSDevicePool'] }} 
          useXamarinStorage: ${{ config['useXamarinStorage'] }} 
          testsLabels: ${{ config['testsLabels'] }} 
          statusContext: ${{ config['statusContext'] }} 
          iOSDeviceDemand: ${{ config['iOSDeviceDemand'] }} 
          vsdropsPrefix: ${{ variables.vsdropsPrefix }}
          keyringPass: $(xma-password)
          gitHubToken: ${{ variables['GitHub.Token'] }}
          xqaCertPass: $(xqa--certificates--password)

    - ${{ each config in parameters.macTestsConfigurations }}:
      - template: templates/mac/stage.yml
        parameters:
          stageName: ${{ config['stageName'] }}
          macPool: ${{ config['macPool'] }}
          osVersion: ${{ config['osVersion'] }}
          statusContext: ${{ config['statusContext'] }}
          keyringPass: $(xma-password)
          checkDemands: ${{ config['checkDemands'] }}

- ${{ if eq(parameters.runSamples, true) }}:
  # TODO: Not the real step
  - stage: sample_testing
    displayName: 'Sample testing'
    dependsOn:
    - build_packages
    condition: and(succeeded(), contains (stageDependencies.build_packages.build.outputs['configuration.RunSampleTests'], 'True'))
    jobs:
    - job: sample_testing
      pool:
        vmImage: ubuntu-latest
      steps:
        # TODO: do parse labels
        - bash: |
            echo "Samples!"
          displayName: 'Sample testing'
